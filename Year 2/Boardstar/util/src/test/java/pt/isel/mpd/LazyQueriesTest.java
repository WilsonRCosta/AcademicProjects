/*
 * GNU General Public License v3.0
 *
 * Copyright (c) 2020, Miguel Gamboa (gamboa.pt)
 *
 *   All rights granted under this License are granted for the term of
 * copyright on the Program, and are irrevocable provided the stated
 * conditions are met.  This License explicitly affirms your unlimited
 * permission to run the unmodified Program.  The output from running a
 * covered work is covered by this License only if the output, given its
 * content, constitutes a covered work.  This License acknowledges your
 * rights of fair use or other equivalent, as provided by copyright law.
 *
 *   You may make, run and propagate covered works that you do not
 * convey, without conditions so long as your license otherwise remains
 * in force.  You may convey covered works to others for the sole purpose
 * of having them make modifications exclusively for you, or provide you
 * with facilities for running those works, provided that you comply with
 * the terms of this License in conveying all material for which you do
 * not control copyright.  Those thus making or running the covered works
 * for you must do so exclusively on your behalf, under your direction
 * and control, on terms that prohibit them from making any copies of
 * your copyrighted material outside their relationship with you.
 *
 *   Conveying under any other circumstances is permitted solely under
 * the conditions stated below.  Sublicensing is not allowed; section 10
 * makes it unnecessary.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.isel.mpd;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

import static org.junit.Assert.*;
import static pt.isel.mpd.util.LazyQueries.*;

public class LazyQueriesTest {

    @Test public void testGenerateRandomIntegers() {
        Random rand = new Random();
        Iterable<Integer> nrs = limit(generate(rand::nextInt),5);
        System.out.println("Test -> Generate Random Integers");
        nrs.forEach(System.out::println);
    }

    @Test public void testIterateWithIncrementalSequence() {
        Iterable<Integer> result = limit(iterate(1, acc -> ++acc), 5);
        System.out.println("Test -> Iterate With Incremental Sequence");
        result.forEach(System.out::println);
    }

    @Test public void testGenerateEvenIntegers() {
        Iterator<Integer> expected = Arrays.asList(0, 2, 4, 6).iterator();
        int[] init = {0};
        Iterable<Integer> actual = limit(filter(generate(() -> init[0]++), n -> n % 2 == 0), 4);
        actual.forEach(curr -> assertEquals(expected.next(), curr));
        assertFalse(expected.hasNext());
    }

    @Test public void testFilterEvenNumbers() {
        Iterable<Integer> nrs = Arrays.asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> expected = Arrays.asList(2, 4, 6).iterator();
        for (Integer curr : filter(nrs, n -> n % 2 == 0)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test public void testSkipSequenceOfNumbers() {
        Iterable<Integer> seq = Arrays.asList(1,2,3,4,5);
        assertEquals(count(skip(seq, 2)),3);
        assertEquals(count(skip(seq, 6)),0);
    }

    @Test public void testTakeWhileEven() {
        Iterable<Integer> seq = Arrays.asList(4,8,0,5,2,9);
        Iterator<Integer> res = takeWhile(seq, num -> num%2 == 0).iterator();
        Iterator<Integer> exp = Arrays.asList(4,8,0).iterator();
        while(res.hasNext()) {
            Integer curr = res.next();
            assertEquals(exp.next(), curr);
        }
        assertFalse(exp.hasNext());
    }

    @Test public void testTakeWhileWithFlatMap() {
        Iterable<String> seq = Arrays.asList("isel", "2020", "mpd");
        Iterable<Character> chars = takeWhile(flatMap(seq, c -> c.chars().mapToObj(x -> (char) x).collect(Collectors.toList())), (c) -> c != 'm');
        Iterable<Character> exp = Arrays.asList('i', 's', 'e', 'l', '2', '0', '2', '0');

        Iterator<Character> chars_iter = chars.iterator();
        Iterator<Character> exp_iter = exp.iterator();
        while (chars_iter.hasNext()) {
            Character curr = chars_iter.next();
            assertEquals(exp_iter.next(), curr);
        }
        assertFalse(exp_iter.hasNext());
    }

    @Test public void testMapDoubleSequence() {
        Iterable<Integer> initNums = Arrays.asList(1,2,3,4);
        Iterator<Integer> actual = map(initNums, num -> num*2).iterator();
        Iterator<Integer> exp = Arrays.asList(2,4,6,8).iterator();
        while(actual.hasNext()){
            assertEquals(actual.next(), exp.next());
        }
        assertFalse(exp.hasNext());
    }

    @Test public void testFirstElementOfSequence() {
        Iterable<String> names = Arrays.asList("Ze", "Manel", "Joaquim");
        assertTrue(first(names).isPresent());
        assertEquals(first(names).get(), "Ze");
    }

    @Test public void testLastElementOfSequence() {
        Iterable<String> names = Arrays.asList("Ze", "Manel", "Joaquim");
        assertTrue(last(names).isPresent());
        assertEquals(last(names).get(), "Joaquim");
    }

    @Test public void testEmptySequence() {
        Iterable<String> names = Arrays.asList("Ze", "Manel", "Joaquim");
        assertTrue(isNotEmpty(names));
    }

    @Test public void testMaxElementOfSequence() {
        Iterable<Integer> seq = Arrays.asList(4,7,8,0,5,0,9);
        Optional<Integer> box = max(seq);
        box.ifPresentOrElse(maxVal -> assertEquals(maxVal.intValue(),9), Assert::fail);
    }

    @Test public void testConvertIterableToArrayOfObjects(){
        Iterable<Character> nrs = Arrays.asList('a','b','c');
        Object[] objects = toArray(nrs);
        Iterator<Character> nrsIter = nrs.iterator();
        for (Object o: objects) { assertEquals(nrsIter.next(), o); }
    }

    @Test public void testDistinctValues() {
        Iterable<Integer> numbers = Arrays.asList(1, 2, 2, 4, 4, 6, 6, 0, 0, 1, 2, 3, 4, 5);
        Iterator<Integer> expected = Arrays.asList(1, 2, 4, 6, 0, 3, 5).iterator();
        for (Integer curr : distinct(numbers)) {
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    @Test public void testCachedValues() {
        Random r = new Random();
        Iterable<Integer> nrs = generate(() -> r.nextInt(100));
        Iterable<Integer> iter = cache(nrs);

        Object[] expected = toArray(limit(iter, 10));
        Object[] actual = toArray(limit(iter, 10));
        System.out.println(Arrays.toString(expected));
        System.out.println(Arrays.toString(actual));
        assertArrayEquals(expected, actual);
    }

}
